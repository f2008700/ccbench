!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNED	include/barrier.h	46;"	d
ALIGNED	include/barrier.h	48;"	d
ALIGNED	include/ccbench.h	207;"	d
ALIGNED	include/ccbench.h	209;"	d
B0	include/ccbench.h	186;"	d
B1	include/ccbench.h	187;"	d
B10	include/ccbench.h	196;"	d
B11	include/ccbench.h	197;"	d
B12	include/ccbench.h	198;"	d
B13	include/ccbench.h	199;"	d
B14	include/ccbench.h	200;"	d
B2	include/ccbench.h	188;"	d
B3	include/ccbench.h	189;"	d
B4	include/ccbench.h	190;"	d
B5	include/ccbench.h	191;"	d
B6	include/ccbench.h	192;"	d
B7	include/ccbench.h	193;"	d
B8	include/ccbench.h	194;"	d
B9	include/ccbench.h	195;"	d
BARRIER_H	include/barrier.h	31;"	d
BARRIER_MEM_FILE	include/barrier.h	42;"	d
CACHE_LINE_MEM_FILE	include/ccbench.h	184;"	d
CACHE_LINE_NUM	include/ccbench.h	75;"	d
CACHE_LINE_STRIDE_2	include/ccbench.h	76;"	d
CAS	include/ccbench.h	/^    CAS,$/;"	e	enum:__anon1
CAS_CONCURRENT	include/ccbench.h	/^    CAS_CONCURRENT,$/;"	e	enum:__anon1
CAS_ON_MODIFIED	include/ccbench.h	/^    CAS_ON_MODIFIED,$/;"	e	enum:__anon1
CAS_ON_MODIFIED_MINE	include/ccbench.h	/^    CAS_ON_MODIFIED_MINE,$/;"	e	enum:__anon1
CAS_ON_SHARED	include/ccbench.h	/^    CAS_ON_SHARED,$/;"	e	enum:__anon1
CAS_PTR	include/atomic_ops.h	101;"	d
CAS_PTR	include/atomic_ops.h	233;"	d
CAS_PTR	include/atomic_ops.h	52;"	d
CAS_U16	include/atomic_ops.h	103;"	d
CAS_U16	include/atomic_ops.h	235;"	d
CAS_U16	include/atomic_ops.h	54;"	d
CAS_U32	include/atomic_ops.h	104;"	d
CAS_U32	include/atomic_ops.h	236;"	d
CAS_U32	include/atomic_ops.h	55;"	d
CAS_U64	include/atomic_ops.h	105;"	d
CAS_U64	include/atomic_ops.h	237;"	d
CAS_U64	include/atomic_ops.h	56;"	d
CAS_U8	include/atomic_ops.h	102;"	d
CAS_U8	include/atomic_ops.h	234;"	d
CAS_U8	include/atomic_ops.h	53;"	d
CC	Makefile	/^CC = \/opt\/csw\/bin\/gcc $/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CC	Makefile	/^CC = tile-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS =  -O0 -ggdb -Wall -g  -fno-inline$/;"	m
CFLAGS	Makefile	/^CFLAGS = -O3 -Wall$/;"	m
DAF_U16	include/atomic_ops.h	129;"	d
DAF_U16	include/atomic_ops.h	261;"	d
DAF_U16	include/atomic_ops.h	80;"	d
DAF_U32	include/atomic_ops.h	130;"	d
DAF_U32	include/atomic_ops.h	262;"	d
DAF_U32	include/atomic_ops.h	81;"	d
DAF_U64	include/atomic_ops.h	131;"	d
DAF_U64	include/atomic_ops.h	263;"	d
DAF_U64	include/atomic_ops.h	82;"	d
DAF_U8	include/atomic_ops.h	128;"	d
DAF_U8	include/atomic_ops.h	260;"	d
DAF_U8	include/atomic_ops.h	79;"	d
DEFAULT_AO_SUCCESS	include/ccbench.h	181;"	d
DEFAULT_CORE1	include/ccbench.h	170;"	d
DEFAULT_CORE2	include/ccbench.h	171;"	d
DEFAULT_CORE3	include/ccbench.h	172;"	d
DEFAULT_CORES	include/ccbench.h	167;"	d
DEFAULT_CORE_OTHERS	include/ccbench.h	173;"	d
DEFAULT_FENCE	include/ccbench.h	178;"	d
DEFAULT_FLUSH	include/ccbench.h	174;"	d
DEFAULT_LFENCE	include/ccbench.h	179;"	d
DEFAULT_PRINT	include/ccbench.h	176;"	d
DEFAULT_REPS	include/ccbench.h	168;"	d
DEFAULT_SFENCE	include/ccbench.h	180;"	d
DEFAULT_STRIDE	include/ccbench.h	177;"	d
DEFAULT_TEST	include/ccbench.h	169;"	d
DEFAULT_VERBOSE	include/ccbench.h	175;"	d
DO_TIMINGS	include/pfd.h	76;"	d
FAD_U16	include/atomic_ops.h	119;"	d
FAD_U16	include/atomic_ops.h	251;"	d
FAD_U16	include/atomic_ops.h	70;"	d
FAD_U32	include/atomic_ops.h	120;"	d
FAD_U32	include/atomic_ops.h	252;"	d
FAD_U32	include/atomic_ops.h	71;"	d
FAD_U64	include/atomic_ops.h	121;"	d
FAD_U64	include/atomic_ops.h	253;"	d
FAD_U64	include/atomic_ops.h	72;"	d
FAD_U8	include/atomic_ops.h	118;"	d
FAD_U8	include/atomic_ops.h	250;"	d
FAD_U8	include/atomic_ops.h	69;"	d
FAI	include/ccbench.h	/^    FAI,$/;"	e	enum:__anon1
FAI_ON_INVALID	include/ccbench.h	/^    FAI_ON_INVALID,$/;"	e	enum:__anon1
FAI_ON_MODIFIED	include/ccbench.h	/^    FAI_ON_MODIFIED,$/;"	e	enum:__anon1
FAI_ON_SHARED	include/ccbench.h	/^    FAI_ON_SHARED,$/;"	e	enum:__anon1
FAI_U16	include/atomic_ops.h	114;"	d
FAI_U16	include/atomic_ops.h	246;"	d
FAI_U16	include/atomic_ops.h	65;"	d
FAI_U32	include/atomic_ops.h	115;"	d
FAI_U32	include/atomic_ops.h	247;"	d
FAI_U32	include/atomic_ops.h	66;"	d
FAI_U64	include/atomic_ops.h	116;"	d
FAI_U64	include/atomic_ops.h	248;"	d
FAI_U64	include/atomic_ops.h	67;"	d
FAI_U8	include/atomic_ops.h	113;"	d
FAI_U8	include/atomic_ops.h	245;"	d
FAI_U8	include/atomic_ops.h	64;"	d
GETTICKS_CALC_REPS	include/ccbench.h	278;"	d
IAF_U16	include/atomic_ops.h	124;"	d
IAF_U16	include/atomic_ops.h	256;"	d
IAF_U16	include/atomic_ops.h	75;"	d
IAF_U32	include/atomic_ops.h	125;"	d
IAF_U32	include/atomic_ops.h	257;"	d
IAF_U32	include/atomic_ops.h	76;"	d
IAF_U64	include/atomic_ops.h	126;"	d
IAF_U64	include/atomic_ops.h	258;"	d
IAF_U64	include/atomic_ops.h	77;"	d
IAF_U8	include/atomic_ops.h	123;"	d
IAF_U8	include/atomic_ops.h	255;"	d
IAF_U8	include/atomic_ops.h	74;"	d
ID	src/ccbench.c	/^uint8_t ID;$/;"	v
INCLUDE	Makefile	/^INCLUDE = include$/;"	m
IN_ORDER	include/ccbench.h	292;"	d
IN_ORDER_END	include/ccbench.h	301;"	d
LDFLAGS	Makefile	/^LDFLAGS = -lm -lrt$/;"	m
LFENCE	include/ccbench.h	/^    LFENCE,$/;"	e	enum:__anon1
LLU	include/ccbench.h	78;"	d
LOAD_FROM_EXCLUSIVE	include/ccbench.h	/^    LOAD_FROM_EXCLUSIVE,$/;"	e	enum:__anon1
LOAD_FROM_EXCLUSIVE_MINE	include/ccbench.h	/^    LOAD_FROM_EXCLUSIVE_MINE,$/;"	e	enum:__anon1
LOAD_FROM_INVALID	include/ccbench.h	/^    LOAD_FROM_INVALID,$/;"	e	enum:__anon1
LOAD_FROM_L1	include/ccbench.h	/^    LOAD_FROM_L1,$/;"	e	enum:__anon1
LOAD_FROM_MEM_SIZE	include/ccbench.h	/^    LOAD_FROM_MEM_SIZE,$/;"	e	enum:__anon1
LOAD_FROM_MODIFIED	include/ccbench.h	/^    LOAD_FROM_MODIFIED,$/;"	e	enum:__anon1
LOAD_FROM_MODIFIED_MINE	include/ccbench.h	/^    LOAD_FROM_MODIFIED_MINE,$/;"	e	enum:__anon1
LOAD_FROM_OWNED	include/ccbench.h	/^    LOAD_FROM_OWNED,$/;"	e	enum:__anon1
LOAD_FROM_OWNED_MINE	include/ccbench.h	/^    LOAD_FROM_OWNED_MINE,$/;"	e	enum:__anon1
LOAD_FROM_SHARED	include/ccbench.h	/^    LOAD_FROM_SHARED,$/;"	e	enum:__anon1
LOAD_FROM_SHARED_MINE	include/ccbench.h	/^    LOAD_FROM_SHARED_MINE,$/;"	e	enum:__anon1
MEM_BARRIER	include/atomic_ops.h	135;"	d
MEM_BARRIER	include/atomic_ops.h	267;"	d
MEM_BARRIER	include/atomic_ops.h	86;"	d
MFENCE	include/ccbench.h	/^    MFENCE,$/;"	e	enum:__anon1
NOP	include/ccbench.h	/^    NOP,$/;"	e	enum:__anon1
NUM_BARRIERS	include/barrier.h	41;"	d
NUM_EVENTS	include/ccbench.h	/^    NUM_EVENTS,			\/* placeholder for printing the num of events *\/$/;"	e	enum:__anon1
P	include/common.h	39;"	d
PAUSE	include/barrier.h	69;"	d
PAUSE	include/barrier.h	72;"	d
PAUSE	include/barrier.h	74;"	d
PAUSE	include/ccbench.h	/^    PAUSE,$/;"	e	enum:__anon1
PFDI	include/pfd.h	132;"	d
PFDI	include/pfd.h	139;"	d
PFDINIT	include/pfd.h	131;"	d
PFDINIT	include/pfd.h	137;"	d
PFDO	include/pfd.h	133;"	d
PFDO	include/pfd.h	145;"	d
PFDOR	include/pfd.h	150;"	d
PFDP	include/pfd.h	134;"	d
PFDPN	include/pfd.h	135;"	d
PFDPN	include/pfd.h	157;"	d
PFDPREFTCH	include/pfd.h	172;"	d
PFD_CORRECTION_CONF	src/pfd.c	71;"	d	file:
PFD_NUM_STORES	include/pfd.h	124;"	d
PFD_PRINT_MAX	include/pfd.h	125;"	d
PFD_VAL_UP_LIMIT	src/pfd.c	168;"	d	file:
PLATFORM	Makefile	/^PLATFORM = DEFAULT$/;"	m
PLATFORM	Makefile	/^PLATFORM = NIAGARA$/;"	m
PLATFORM	Makefile	/^PLATFORM = OPTERON$/;"	m
PLATFORM	Makefile	/^PLATFORM = OPTERON2$/;"	m
PLATFORM	Makefile	/^PLATFORM = TILERA$/;"	m
PLATFORM	Makefile	/^PLATFORM = XEON2$/;"	m
PLATFORM_NUMA	Makefile	/^PLATFORM_NUMA = 1$/;"	m
PREFETCHW	include/pfd.h	80;"	d
PREFETCHW	include/pfd.h	82;"	d
PREFETCHW	include/pfd.h	84;"	d
PRINT	include/common.h	40;"	d
PROFILER	include/ccbench.h	/^    PROFILER,$/;"	e	enum:__anon1
SFENCE	include/ccbench.h	/^    SFENCE,$/;"	e	enum:__anon1
SRC	Makefile	/^SRC = src$/;"	m
STORE_ON_EXCLUSIVE	include/ccbench.h	/^    STORE_ON_EXCLUSIVE,$/;"	e	enum:__anon1
STORE_ON_INVALID	include/ccbench.h	/^    STORE_ON_INVALID,$/;"	e	enum:__anon1
STORE_ON_MODIFIED	include/ccbench.h	/^    STORE_ON_MODIFIED,$/;"	e	enum:__anon1
STORE_ON_MODIFIED_MINE	include/ccbench.h	/^    STORE_ON_MODIFIED_MINE,$/;"	e	enum:__anon1
STORE_ON_MODIFIED_NO_SYNC	include/ccbench.h	/^    STORE_ON_MODIFIED_NO_SYNC,$/;"	e	enum:__anon1
STORE_ON_OWNED	include/ccbench.h	/^    STORE_ON_OWNED,$/;"	e	enum:__anon1
STORE_ON_OWNED_MINE	include/ccbench.h	/^    STORE_ON_OWNED_MINE,$/;"	e	enum:__anon1
STORE_ON_SHARED	include/ccbench.h	/^    STORE_ON_SHARED,$/;"	e	enum:__anon1
STR	include/ccbench.h	203;"	d
STR	include/common.h	37;"	d
SWAP	include/ccbench.h	/^    SWAP,$/;"	e	enum:__anon1
SWAP_ON_MODIFIED	include/ccbench.h	/^    SWAP_ON_MODIFIED,$/;"	e	enum:__anon1
SWAP_ON_SHARED	include/ccbench.h	/^    SWAP_ON_SHARED,$/;"	e	enum:__anon1
SWAP_PTR	include/atomic_ops.h	107;"	d
SWAP_PTR	include/atomic_ops.h	239;"	d
SWAP_PTR	include/atomic_ops.h	58;"	d
SWAP_U16	include/atomic_ops.h	109;"	d
SWAP_U16	include/atomic_ops.h	241;"	d
SWAP_U16	include/atomic_ops.h	60;"	d
SWAP_U32	include/atomic_ops.h	110;"	d
SWAP_U32	include/atomic_ops.h	242;"	d
SWAP_U32	include/atomic_ops.h	61;"	d
SWAP_U64	include/atomic_ops.h	111;"	d
SWAP_U64	include/atomic_ops.h	243;"	d
SWAP_U64	include/atomic_ops.h	62;"	d
SWAP_U8	include/atomic_ops.h	108;"	d
SWAP_U8	include/atomic_ops.h	240;"	d
SWAP_U8	include/atomic_ops.h	59;"	d
TAS	include/ccbench.h	/^    TAS,$/;"	e	enum:__anon1
TAS_ON_MODIFIED	include/ccbench.h	/^    TAS_ON_MODIFIED,$/;"	e	enum:__anon1
TAS_ON_SHARED	include/ccbench.h	/^    TAS_ON_SHARED,$/;"	e	enum:__anon1
TAS_U8	include/atomic_ops.h	133;"	d
TAS_U8	include/atomic_ops.h	265;"	d
TAS_U8	include/atomic_ops.h	84;"	d
UNAME	Makefile	/^UNAME := $(shell uname -n)$/;"	m
VER_FLAGS	Makefile	/^VER_FLAGS = -D_GNU_SOURCE$/;"	m
XSTR	include/ccbench.h	202;"	d
XSTR	include/common.h	36;"	d
_ATOMIC_OPS_H_INCLUDED_	include/atomic_ops.h	31;"	d
_COMMON_H_	include/common.h	31;"	d
_H_CCBENCH_	include/ccbench.h	31;"	d
_PFD_H_	include/pfd.h	31;"	d
_mm_clflush	include/atomic_ops.h	141;"	d
_mm_clflush	include/atomic_ops.h	160;"	d
_mm_clflush	include/atomic_ops.h	91;"	d
_mm_lfence	include/atomic_ops.h	137;"	d
_mm_lfence	include/atomic_ops.h	156;"	d
_mm_lfence	include/atomic_ops.h	87;"	d
_mm_mfence	include/atomic_ops.h	139;"	d
_mm_mfence	include/atomic_ops.h	158;"	d
_mm_mfence	include/atomic_ops.h	89;"	d
_mm_pause	include/atomic_ops.h	159;"	d
_mm_sfence	include/atomic_ops.h	138;"	d
_mm_sfence	include/atomic_ops.h	157;"	d
_mm_sfence	include/atomic_ops.h	88;"	d
_pfd_s	src/pfd.c	/^volatile ticks* _pfd_s;$/;"	v
abs_dev	include/pfd.h	/^  double abs_dev;$/;"	m	struct:abs_deviation
abs_dev_10p	include/pfd.h	/^  double abs_dev_10p;$/;"	m	struct:abs_deviation
abs_dev_25p	include/pfd.h	/^  double abs_dev_25p;$/;"	m	struct:abs_deviation
abs_dev_50p	include/pfd.h	/^  double abs_dev_50p;$/;"	m	struct:abs_deviation
abs_dev_75p	include/pfd.h	/^  double abs_dev_75p;$/;"	m	struct:abs_deviation
abs_dev_rst	include/pfd.h	/^  double abs_dev_rst;$/;"	m	struct:abs_deviation
abs_deviation	include/pfd.h	/^typedef struct abs_deviation$/;"	s
abs_deviation_t	include/pfd.h	/^} abs_deviation_t;$/;"	t	typeref:struct:abs_deviation
absd	src/pfd.c	/^double absd(double x)$/;"	f	file:
avg	include/pfd.h	/^  double avg;$/;"	m	struct:abs_deviation
avg_10p	include/pfd.h	/^  double avg_10p;$/;"	m	struct:abs_deviation
avg_25p	include/pfd.h	/^  double avg_25p;$/;"	m	struct:abs_deviation
avg_50p	include/pfd.h	/^  double avg_50p;$/;"	m	struct:abs_deviation
avg_75p	include/pfd.h	/^  double avg_75p;$/;"	m	struct:abs_deviation
avg_rst	include/pfd.h	/^  double avg_rst;$/;"	m	struct:abs_deviation
barrier	include/barrier.h	/^typedef ALIGNED(64) struct barrier$/;"	s
barrier_init	src/barrier.c	/^barrier_init(const uint32_t barrier_num, const uint64_t participants, int (*color)(int),$/;"	f
barrier_t	include/barrier.h	/^} barrier_t;$/;"	v	typeref:struct:barrier
barrier_wait	src/barrier.c	/^barrier_wait(const uint32_t barrier_num, const uint32_t id, const uint32_t total_cores) $/;"	f
barriers	src/barrier.c	/^barrier_t* barriers;$/;"	v
barriers_init	src/barrier.c	/^barriers_init(const uint32_t num_procs)$/;"	f
barriers_term	src/barrier.c	/^barriers_term(const uint32_t id) $/;"	f
cache_line	include/ccbench.h	/^typedef struct cache_line$/;"	s
cache_line_close	src/ccbench.c	/^cache_line_close(const uint32_t id, const char* name)$/;"	f
cache_line_open	src/ccbench.c	/^cache_line_open()$/;"	f
cache_line_t	include/ccbench.h	/^} cache_line_t;$/;"	t	typeref:struct:cache_line
cas	src/ccbench.c	/^cas(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
cas_0_eventually	src/ccbench.c	/^cas_0_eventually(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
cas_no_pf	src/ccbench.c	/^cas_no_pf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
clrand	include/ccbench.h	336;"	d
cmp_vals	src/pfd.c	/^ticks cmp_vals(const void *a, const void *b) {$/;"	f
color	include/barrier.h	/^  int (*color)(int); \/*or color function: if return 0 -> no , 1 -> participant. Priority on this *\/$/;"	m	struct:barrier
color_all	src/barrier.c	/^int color_all(int id)$/;"	f
cpus	src/ccbench.c	/^cpu_set_t cpus;$/;"	v
create_rand_list_cl	src/ccbench.c	/^create_rand_list_cl(volatile uint64_t* list, size_t n)$/;"	f	file:
fai	src/ccbench.c	/^fai(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
get_abs_deviation	src/pfd.c	/^get_abs_deviation(volatile ticks* vals, const size_t num_vals, abs_deviation_t* abs_dev)$/;"	f
getticks	include/pfd.h	/^getticks()$/;"	f
getticks	include/pfd.h	/^getticks(void) $/;"	f
getticks	include/pfd.h	/^getticks(void)$/;"	f
getticks	include/pfd.h	/^static inline ticks getticks()$/;"	f
getticks_correction_calc	include/ccbench.h	/^static inline ticks getticks_correction_calc() $/;"	f
invalidate	src/ccbench.c	/^invalidate(volatile cache_line_t* cl, uint64_t index, volatile uint64_t reps)$/;"	f
llu	src/pfd.c	132;"	d	file:
load_0	src/ccbench.c	/^load_0(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
load_0_eventually	src/ccbench.c	/^load_0_eventually(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
load_0_eventually_lf	src/ccbench.c	/^load_0_eventually_lf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_0_eventually_mf	src/ccbench.c	/^load_0_eventually_mf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_0_eventually_nf	src/ccbench.c	/^load_0_eventually_nf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_0_eventually_no_pf	src/ccbench.c	/^load_0_eventually_no_pf(volatile cache_line_t* cl)$/;"	f
load_0_lf	src/ccbench.c	/^load_0_lf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_0_mf	src/ccbench.c	/^load_0_mf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_0_nf	src/ccbench.c	/^load_0_nf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
load_next	src/ccbench.c	/^load_next(volatile uint64_t* cl, volatile uint64_t reps)$/;"	f
load_next_lf	src/ccbench.c	/^load_next_lf(volatile uint64_t* cl, volatile uint64_t reps)$/;"	f	file:
load_next_mf	src/ccbench.c	/^load_next_mf(volatile uint64_t* cl, volatile uint64_t reps)$/;"	f	file:
load_next_nf	src/ccbench.c	/^load_next_nf(volatile uint64_t* cl, volatile uint64_t reps)$/;"	f	file:
main	src/ccbench.c	/^main(int argc, char **argv) $/;"	f
max_val	include/pfd.h	/^  double max_val;$/;"	m	struct:abs_deviation
max_val_idx	include/pfd.h	/^  uint64_t max_val_idx;$/;"	m	struct:abs_deviation
med_val_idx	include/pfd.h	/^  uint64_t med_val_idx;$/;"	m	struct:abs_deviation
min_val	include/pfd.h	/^  double min_val;$/;"	m	struct:abs_deviation
min_val_idx	include/pfd.h	/^  uint64_t min_val_idx;$/;"	m	struct:abs_deviation
moesi_type_des	include/ccbench.h	/^const char* moesi_type_des[] =$/;"	v
moesi_type_t	include/ccbench.h	/^  } moesi_type_t;$/;"	t	typeref:enum:__anon1
my_random	include/ccbench.h	338;"	d
num_crossing1	include/barrier.h	/^  volatile uint64_t num_crossing1;$/;"	m	struct:barrier
num_crossing2	include/barrier.h	/^  volatile uint64_t num_crossing2;$/;"	m	struct:barrier
num_crossing3	include/barrier.h	/^  volatile uint64_t num_crossing3;$/;"	m	struct:barrier
num_dev_10p	include/pfd.h	/^  uint32_t num_dev_10p;$/;"	m	struct:abs_deviation
num_dev_25p	include/pfd.h	/^  uint32_t num_dev_25p;$/;"	m	struct:abs_deviation
num_dev_50p	include/pfd.h	/^  uint32_t num_dev_50p;$/;"	m	struct:abs_deviation
num_dev_75p	include/pfd.h	/^  uint32_t num_dev_75p;$/;"	m	struct:abs_deviation
num_dev_rst	include/pfd.h	/^  uint32_t num_dev_rst;$/;"	m	struct:abs_deviation
num_participants	include/barrier.h	/^  uint64_t num_participants;$/;"	m	struct:barrier
num_vals	include/pfd.h	/^  uint64_t num_vals;$/;"	m	struct:abs_deviation
parse_size	src/ccbench.c	/^parse_size(char* optarg)$/;"	f	file:
pfd_correction	src/pfd.c	/^volatile ticks pfd_correction;$/;"	v
pfd_store	src/pfd.c	/^volatile ticks** pfd_store;$/;"	v
pfd_store_init	src/pfd.c	/^pfd_store_init(uint32_t num_entries)$/;"	f
pow2roundup	include/ccbench.h	/^static inline uint32_t pow2roundup (uint32_t x)$/;"	f
print_abs_deviation	src/pfd.c	/^print_abs_deviation(const abs_deviation_t* abs_dev)$/;"	f
seed_rand	include/ccbench.h	/^  seed_rand() $/;"	f
seeds	src/ccbench.c	/^unsigned long* seeds;$/;"	v
set_cpu	include/ccbench.h	/^set_cpu(int cpu) $/;"	f
sirand	include/ccbench.h	337;"	d
std_dev	include/pfd.h	/^  double std_dev;$/;"	m	struct:abs_deviation
std_dev_10p	include/pfd.h	/^  double std_dev_10p;$/;"	m	struct:abs_deviation
std_dev_25p	include/pfd.h	/^  double std_dev_25p;$/;"	m	struct:abs_deviation
std_dev_50p	include/pfd.h	/^  double std_dev_50p;$/;"	m	struct:abs_deviation
std_dev_75p	include/pfd.h	/^  double std_dev_75p;$/;"	m	struct:abs_deviation
std_dev_rst	include/pfd.h	/^  double std_dev_rst;$/;"	m	struct:abs_deviation
store_0	src/ccbench.c	/^store_0(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
store_0_eventually	src/ccbench.c	/^store_0_eventually(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
store_0_eventually_dw	src/ccbench.c	/^store_0_eventually_dw(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_mf	src/ccbench.c	/^store_0_eventually_mf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_nf	src/ccbench.c	/^store_0_eventually_nf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_pfd1	src/ccbench.c	/^store_0_eventually_pfd1(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
store_0_eventually_pfd1_mf	src/ccbench.c	/^store_0_eventually_pfd1_mf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_pfd1_nf	src/ccbench.c	/^store_0_eventually_pfd1_nf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_pfd1_sf	src/ccbench.c	/^store_0_eventually_pfd1_sf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_eventually_sf	src/ccbench.c	/^store_0_eventually_sf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f	file:
store_0_no_pf	src/ccbench.c	/^store_0_no_pf(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
swap	src/ccbench.c	/^swap(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
swap_pointer	include/atomic_ops.h	/^static inline void* swap_pointer(volatile void* ptr, void *x) {$/;"	f
swap_uint16	include/atomic_ops.h	/^static inline uint16_t swap_uint16(volatile uint16_t* target,  uint16_t x) {$/;"	f
swap_uint32	include/atomic_ops.h	/^static inline uint32_t swap_uint32(volatile uint32_t* target,  uint32_t x) {$/;"	f
swap_uint64	include/atomic_ops.h	/^static inline uint64_t swap_uint64(volatile uint64_t* target,  uint64_t x) {$/;"	f
swap_uint8	include/atomic_ops.h	/^static inline uint8_t swap_uint8(volatile uint8_t* target,  uint8_t x) {$/;"	f
tas	src/ccbench.c	/^tas(volatile cache_line_t* cl, volatile uint64_t reps)$/;"	f
tas_uint8	include/atomic_ops.h	/^static inline uint8_t tas_uint8(volatile uint8_t *addr) {$/;"	f
test_ao_success	src/ccbench.c	/^uint32_t test_ao_success = DEFAULT_AO_SUCCESS;$/;"	v
test_cache_line_num	src/ccbench.c	/^uint32_t test_cache_line_num = CACHE_LINE_NUM;$/;"	v
test_core1	src/ccbench.c	/^uint32_t test_core1 = DEFAULT_CORE1;$/;"	v
test_core2	src/ccbench.c	/^uint32_t test_core2 = DEFAULT_CORE2;$/;"	v
test_core3	src/ccbench.c	/^uint32_t test_core3 = DEFAULT_CORE3;$/;"	v
test_core_others	src/ccbench.c	/^uint32_t test_core_others = DEFAULT_CORE_OTHERS;$/;"	v
test_cores	src/ccbench.c	/^uint32_t test_cores = DEFAULT_CORES;$/;"	v
test_fence	src/ccbench.c	/^uint32_t test_fence = DEFAULT_FENCE;$/;"	v
test_flush	src/ccbench.c	/^uint32_t test_flush = DEFAULT_FLUSH;$/;"	v
test_lfence	src/ccbench.c	/^uint32_t test_lfence = DEFAULT_LFENCE;$/;"	v
test_mem_size	src/ccbench.c	/^size_t   test_mem_size = CACHE_LINE_NUM * sizeof(cache_line_t);$/;"	v
test_print	src/ccbench.c	/^uint32_t test_print = DEFAULT_PRINT;$/;"	v
test_reps	src/ccbench.c	/^uint32_t test_reps = DEFAULT_REPS;$/;"	v
test_sfence	src/ccbench.c	/^uint32_t test_sfence = DEFAULT_SFENCE;$/;"	v
test_stride	src/ccbench.c	/^uint32_t test_stride = DEFAULT_STRIDE;$/;"	v
test_test	src/ccbench.c	/^moesi_type_t test_test = DEFAULT_TEST;$/;"	v
test_verbose	src/ccbench.c	/^uint32_t test_verbose = DEFAULT_VERBOSE;$/;"	v
ticks	include/pfd.h	/^typedef uint64_t ticks;$/;"	t
wait_cycles	include/ccbench.h	/^wait_cycles(volatile uint64_t cycles)$/;"	f
word	include/ccbench.h	/^  volatile uint32_t word[16];$/;"	m	struct:cache_line
xorshf96	include/ccbench.h	/^xorshf96(unsigned long* x, unsigned long* y, unsigned long* z) $/;"	f
